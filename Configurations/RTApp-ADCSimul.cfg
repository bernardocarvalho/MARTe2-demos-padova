+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:STATUS"
        PVType = int32
    }
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET"
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/MARTe2-git/MARTe2/Resources/HTTP"
    }
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMInput = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = ADCSimulator
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = ADCSimulator
                    Type = uint32
                }
                ADC0 = {
                    DataSource = ADCSimulator
                    Type = int32
                    Samples = 2000
                }
                ADC1 = {
                    DataSource = ADCSimulator
                    Type = int32
                    Samples = 2000
                }
                ADC2 = {
                    DataSource = ADCSimulator
                    Type = int32
                    Samples = 2000
                }
                ADC3 = {
                    DataSource = ADCSimulator
                    Type = int32
                    Samples = 2000
                }
                Idle_Thread1_CycleTime = {
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32
                }
                Run_Thread1_CycleTime = {
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                }
                ADC1Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                }
                ADC2Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                }
                ADC3Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMDS = {
            Class = IOGAM //This should be a filter GAM
            InputSignals = {
                ADC0Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                    Ranges = {{0,0}} //Unfiltered decimation...
                }
                ADC1Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                    Ranges = {{0,0}}
                }
                ADC2Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                    Ranges = {{0,0}}
                }
                ADC3Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 2000
                    Ranges = {{0,0}}
                }
            }
            OutputSignals = {
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC1SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC2SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC3SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
            }
        }
        +GAMTypeConvert = {
            Class = ConversionGAM
            InputSignals = {
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC1SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC2SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC3SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
            }
            OutputSignals = {
                ADC0S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC1S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC2S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC3S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
            }
        }
        +GAMHistogramCycleTimes = {
            Class = HistogramGAM
            BeginCycleNumber = 10
            StateChangeResetName = All
            InputSignals = {
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 500
                    MaxLim = 1000
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 500
                    MaxLim = 1000
                }
            }
            OutputSignals = {
                Idle_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutputHist
                    NumberOfElements = 10
                    Type = uint32
                }
                Run_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutputHist
                    NumberOfElements = 10
                    Type = uint32
                }
            }
        }
        +GAMCAOutput = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC1S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC2S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC3S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                Counter = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                ADC0S = {
                    DataSource = EPICSCAOutput
                    Type = float32
                    NumberOfElements = 1
                }
                ADC1S = {
                    DataSource = EPICSCAOutput
                    Type = float32
                    NumberOfElements = 1
                }
                ADC2S = {
                    DataSource = EPICSCAOutput
                    Type = float32
                    NumberOfElements = 1
                }
                ADC3S = {
                    DataSource = EPICSCAOutput
                    Type = float32
                    NumberOfElements = 1
                }
            }
        }
        +GAMDebug = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC1S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }

            }
            OutputSignals = {
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                ADC0SI = {
                    DataSource = LoggerDataSource
                    Type = int32
                    NumberOfElements = 1
                }
                ADC1S = {
                    DataSource = LoggerDataSource
                    Type = float32
                    NumberOfElements = 1
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +ADCSimulator = {
            Class = ADCSimulator
            SleepNature = "Default"
            ADCFrequency = 2000000
            SignalsGains = {32768, 16384, 8192, 4096}
            SignalsFrequencies = {1, 2, 5, 10}
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                ADC0 = {
                    Type = int32
                }
                ADC1 = {
                    Type = int32
                }
                ADC2 = {
                    Type = int32
                }
                ADC3 = {
                    Type = int32
                }
            }
        }
        +EPICSCAOutput = {
            Class = EPICSCA::EPICSCAOutput
            StackSize = 1048576
            CPUs = 0x1
            IgnoreBufferOverrun = 1
            NumberOfBuffers = 10
            Signals = {
                Time = {
                    PVName = "MARTE2-DEMO-APP:TIME"
                    Type = uint32
                }
                Counter = {
                    PVName = "MARTE2-DEMO-APP:COUNTER"
                    Type = uint32
                }
                ADC0S = {
                    PVName = "MARTE2-DEMO-APP:ADC0S"
                    Type = float32
                }
                ADC1S = {
                    PVName = "MARTE2-DEMO-APP:ADC1S"
                    Type = float32
                }
                ADC2S = {
                    PVName = "MARTE2-DEMO-APP:ADC2S"
                    Type = float32
                }
                ADC3S = {
                    PVName = "MARTE2-DEMO-APP:ADC3S"
                    Type = float32
                }

            }
        }
        +EPICSCAOutputHist = {
            Class = EPICSCA::EPICSCAOutput
            StackSize = 1048576
            CPUs = 0x1
            IgnoreBufferOverrun = 1
            NumberOfBuffers = 10
            Signals = {
                Idle_Thread1_CycleTime_Stats = {
                    PVName = "MARTE2-DEMO-APP:HIST-IDLE-CT"
                    Type = uint32
                }
                Run_Thread1_CycleTime_Stats = {
                    PVName = "MARTE2-DEMO-APP:HIST-RUN-CT"
                    Type = uint32
                }
            }
        }

    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput GAMDS GAMTypeConvert GAMHistogramCycleTimes GAMCAOutput }
                    //Functions = {GAMInput GAMDS GAMTypeConvert GAMHistogramCycleTimes GAMCAOutput GAMDebug }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput GAMDS GAMTypeConvert GAMHistogramCycleTimes GAMCAOutput }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}

//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
