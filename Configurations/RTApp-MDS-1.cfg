+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:STATUS"
        PVType = int32
    }    
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET" 
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +OpenTreeMsg = {
                Class = Message
                Destination = "TestApp.Data.SignalsWriter"
                Function = OpenTree
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 200
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +GAMMeasurements = {
            Class = IOGAM
            InputSignals = {
                Measurement0 = {
                    Type = float64
                    DataSource = DDB1
                    Default = 0
                    Alias = Control0
                }
                Measurement1 = {
                    Type = float64
                    DataSource = DDB1
                    Default = 0
                }
                Measurement2 = {
                    Type = float64
                    DataSource = DDB1
                    Default = 0
                }
                Measurement3 = {
                    Type = float64
                    DataSource = DDB1
                    Default = 0
                }
            }
            OutputSignals = {
                Measurement0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement3 = {
                    Type = float64
                    DataSource = DDB1
                }
            }
        }
        +GAMRef0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.1
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 3.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference1 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 7.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference2 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 10.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference3 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMSSM = {
            Class = SSMGAM
            StateMatrix = {
                {1 0 0 0 0 0 0 0} 
                {0 1 0 0 0 0 0 0} 
                {0 0 1 0 0 0 0 0} 
                {0 0 0 1 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0}
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0}
            } 
            InputMatrix = {
                {0.005 0 0 0 -0.005 0 0 0} 
                {0 0.005 0 0 0 -0.005 0 0} 
                {0 0 0.005  0 0 0 -0.005 0} 
                {0 0 0 0.005 0 0 0 -0.005} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0}
            }
            OutputMatrix = {
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {0 0 0 0 0 0 0 0} 
                {1 0 0 0 0 0 0 0} 
                {0 1 0 0 0 0 0 0} 
                {0 0 1 0 0 0 0 0} 
                {0 0 0 1 0 0 0 0} 
            }  
            FeedthroughMatrix = {
                {1 0 0 0 -1 0 0 0} 
                {0 1 0 0 0 -1 0 0} 
                {0 0 1 0 0 0 -1 0} 
                {0 0 0 1 0 0 0 -1} 
                {0.01 0 0 0 -0.01 0 0 0} 
                {0 1 0 0 0 -1 0 0} 
                {0 0 1 0 0 0 -1 0} 
                {0 0 0 1 0 0 0 -1} 
            } 
            ResetInEachState = 1
            InputSignals = {
                Reference0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Reference1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Reference2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Reference3 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Measurement3 = {
                    Type = float64
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Error0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error3 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control3 = {
                    Type = float64
                    DataSource = DDB1
                }
                State0 = {
                    Type = float64
                    DataSource = DDB1
                }
                State1 = {
                    Type = float64
                    DataSource = DDB1
                }
                State2 = {
                    Type = float64
                    DataSource = DDB1
                }
                State3 = {
                    Type = float64
                    DataSource = DDB1
                }
                State4 = {
                    Type = float64
                    DataSource = DDB1
                }
                State5 = {
                    Type = float64
                    DataSource = DDB1
                }
                State6 = {
                    Type = float64
                    DataSource = DDB1
                }
                State7 = {
                    Type = float64
                    DataSource = DDB1
                }

            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference1 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference2 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference3 = {
                    DataSource = DDB1
                    Type = float64
                }
                Measurement0 = {
                    DataSource = DDB1
                    Type = float64
                }
                Measurement1 = {
                    DataSource = DDB1
                    Type = float64
                }
                Measurement2 = {
                    DataSource = DDB1
                    Type = float64
                }
                Measurement3 = {
                    DataSource = DDB1
                    Type = float64
                }
                Error0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Error3 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control0 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control1 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control2 = {
                    Type = float64
                    DataSource = DDB1
                }
                Control3 = {
                    Type = float64
                    DataSource = DDB1
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                Reference0 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Reference1 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Reference2 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Reference3 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Measurement0 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Measurement1 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Measurement2 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Measurement3 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Error0 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Error1 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Error2 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Error3 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Control0 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Control1 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Control2 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Control3 = {
                    Type = float64
                    DataSource = SignalsWriter 
                }
                Run_Thread1_CycleTime = {
                    Type = uint32
                    DataSource = SignalsWriter 
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        } 
        +SignalsWriter = {
            Class = MDSWriter::MDSWriter
            NumberOfBuffers = 120000
            CPUMask = 0x1
            StackSize = 10000000
            TreeName = "rtappdemo"
            StoreOnTrigger = 0
            NumberOfPreTriggers = 0
            NumberOfPostTriggers = 0
            EventName = "IgnoreMe"
            TimeRefresh = 5
            Signals = {
                Time = {
                    SignalType = uint32
                    TimeSignal = 1
                }
                Measurement0 = {
                    NodeName = "INP.MEAS0"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "INP.MEAS0D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Measurement1 = {
                    NodeName = "INP.MEAS1"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "INP.MEAS1D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Measurement2 = {
                    NodeName = "INP.MEAS2"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "INP.MEAS2D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Measurement3 = {
                    NodeName = "INP.MEAS3"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "INP.MEAS3D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Reference0 = {
                    NodeName = "REFS.REF0"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "REFS.REF0D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Reference1 = {
                    NodeName = "REFS.REF1"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "REFS.REF1D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Reference2 = {
                    NodeName = "REFS.REF2"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "REFS.REF2D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Reference3 = {
                    NodeName = "REFS.REF3"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "REFS.REF3D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Control0 = {
                    NodeName = "CONTROLS.CONTROL0"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "CONTROLS.CONTROL0D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Control1 = {
                    NodeName = "CONTROLS.CONTROL1"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "CONTROLS.CONTROL1D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Control2 = {
                    NodeName = "CONTROLS.CONTROL2"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "CONTROLS.CONTROL2D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Control3 = {
                    NodeName = "CONTROLS.CONTROL3"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "CONTROLS.CONTROL3D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Error0 = {
                    NodeName = "ERRORS.ERROR0"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "ERRORS.ERROR0D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Error1 = {
                    NodeName = "ERRORS.ERROR1"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "ERRORS.ERROR1D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Error2 = {
                    NodeName = "ERRORS.ERROR2"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "ERRORS.ERROR2D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Error3 = {
                    NodeName = "ERRORS.ERROR3"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "ERRORS.ERROR3D"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
                Run_Thread1_CycleTime = {
                    NodeName = "PERF.CYCLET"
                    Period = 5e-3
                    MakeSegmentAfterNWrites = 200
                    DecimatedNodeName = "PERF.CYCLETD"
                    MinMaxResampleFactor = 100
                    SamplePhase = 0
                    AutomaticSegmentation = 0
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer GAMMeasurements GAMRef0 GAMRef1 GAMRef2 GAMRef3 GAMSSM }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer GAMMeasurements GAMRef0 GAMRef1 GAMRef2 GAMRef3 GAMSSM GAMSignalsWriter }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
