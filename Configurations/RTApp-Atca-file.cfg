+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "ISTTOK:marte2:STATUS"
        PVType = int32
    }
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "ISTTOK:marte2:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "ISTTOK:marte2:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET"
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2/Resources/HTTP"
    }
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
/*
+LoggerService = {
    Class = "LoggerService"
    CPUs = "0x1"
    StackSize = "32768"
    NumberOfLogPages = "128"
    +ConLogger = {
        Class = "ConsoleLogger"
        Format = "EtOoFmC"
        PrintKeys = "1"
    }
    +UDPLogger = {
        Class = "UDPLogger"
        Format = "EtOoFmC"
        //PrintKeys = "1"
        Ident = "AtcaIopBoard"
        Address = "10.136.240.213"
        // Address = "127.0.0.1"
        Port = "32767"
    }
}
*/
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = IsttokApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToRunMsg = {
                Class = Message
                Destination = IsttokApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToIdleMsg = {
                Class = Message
                Destination = IsttokApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = IsttokApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToIdleMsg = {
                Class = Message
                Destination = IsttokApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = IsttokApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
    }
}
$IsttokApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMInput = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = AtcaIop
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = AtcaIop
                    Type = uint32
                }
                ADC0 = {
                    DataSource = AtcaIop
                    Type = int32
                    Samples = 20
                }
                ADC1 = {
                    DataSource = AtcaIop
                    Type = int32
                    Samples = 20
                }
                ADC2 = {
                    DataSource = AtcaIop
                    Type = int32
                    Samples = 20
                }
                ADC3 = {
                    DataSource = AtcaIop
                    Type = int32
                    Samples = 20
                }
                ADC0Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC1Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC2Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC3Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC4Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC5Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC6Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC7Decim = {
                    DataSource = AtcaIop
                    Type = int32
                }
                ADC0Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC1Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC2Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC3Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC4Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC5Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC6Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                ADC7Integral = {
                    DataSource = AtcaIop
                    Type = int64
                }
                Idle_Thread1_CycleTime = {
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32
                }
                Run_Thread1_CycleTime = {
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 20
                    NumberOfDimensions = 1
                }
                ADC1Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 20
                    NumberOfDimensions = 1
                }
                ADC2Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfDimensions = 1
                    NumberOfElements = 20
                }
                ADC3Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 20
                }
                ADC0DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC1DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC2DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC3DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC4DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC5DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC6DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC7DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC0Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC1Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC2Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC3Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC4Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC5Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC6Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC7Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    NumberOfDimensions = 1
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMDS = {
            Class = IOGAM //This should be a filter GAM. No longuer used in ATCA signals
            InputSignals = {
                ADC0Raw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 20
                    Ranges = {{0,0}} //Unfiltered decimation...
                }
            }
            OutputSignals = {
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
            }
        }
        +GAMTypeConvert = {
            Class = ConversionGAM
            InputSignals = {
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC0DRaw = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }
                ADC1DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC2DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC3DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC4DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC5DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC6DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC7DRaw = {
                    DataSource = DDB1
                    Type = int32
                }
                ADC0Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC1Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC2Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC3Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC4Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC5Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC6Integral = {
                    DataSource = DDB1
                    Type = int64
                }
                ADC7Integral = {
                    DataSource = DDB1
                    Type = int64
                }
            }
            OutputSignals = {
                ADC0S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }

                ADC0DecimS = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
                ADC1DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC2DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC3DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC4DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC5DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC6DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC7DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC1IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC2IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC3IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC4IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC5IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC6IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC7IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMHistogramCycleTimes = {
            Class = HistogramGAM
            BeginCycleNumber = 10
            StateChangeResetName = All
            InputSignals = {
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 80
                    MaxLim = 120
                }
                Run_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 50
                    MaxLim = 150
                }
            }
            OutputSignals = {
                Idle_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutputHist
                    NumberOfDimensions = 1
                    NumberOfElements = 10
                    Type = uint32
                }
                Run_Thread1_CycleTime_Stats = {
                    DataSource = EPICSCAOutputHist
                    NumberOfDimensions = 1
                    NumberOfElements = 10
                    Type = uint32
                }
            }
        }
        +GAMCAOutput = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0S = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                Counter = {
                    DataSource = EPICSCAOutput
                    Type = uint32
                }
                ADC0S = {
                    DataSource = EPICSCAOutput
                    Type = float32
                    NumberOfElements = 1
                }
            }
        }
        +GAMDebug = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0SI = {
                    DataSource = DDB1
                    Type = int32
                    NumberOfElements = 1
                }

            }
            OutputSignals = {
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                ADC0SI = {
                    DataSource = LoggerDataSource
                    Type = int32
                    NumberOfElements = 1
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
            /*
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
            */
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC1DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC2DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC3DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC4DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC5DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC6DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC7DecimS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC0IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC1IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC2IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
                ADC3IntegS = {
                    DataSource = DDB1
                    Type = float32
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                AdcRawDecim0 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim1 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim2 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim3 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim4 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim5 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim6 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcRawDecim7 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcInteg0 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcInteg1 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcInteg2 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                AdcInteg3 = {
                    DataSource = SignalsWriter
                    Type = float32
                }
                /*
                Measurement0 = {
                    DataSource = SignalsMdsWriter
                    Type = float32
                }
                */
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +AtcaIop = {
            Class = AtcaIop

            DeviceName  = "/dev/atca_v6"
            BoardId     = 2
            IsMaster    = 1

            //SleepNature = "Default"
            SleepNature = "Busy"
            SleepPercentage = 0
            ADCFrequency = 200000
            ChopperPeriod = 2000
            SignalsGains = {32768, 16384, 8192, 4096}
            SignalsFrequencies = {1, 2, 5, 10}
            ElectricalOffsets = {1, 2, 3, 4, 5, 6, 7, 8}  //, 9, 10, 11, 12, 13, 14, 15, 16}
            WiringOffsets = {0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8} //, 0.9, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16}
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                ADC0 = {
                    Type = int32
                }
                ADC1 = {
                    Type = int32
                }
                ADC2 = {
                    Type = int32
                }
                ADC3 = {
                    Type = int32
                }
                ADC0Decim = {
                    Type = int32
                }
                ADC1Decim = {
                    Type = int32
                }
                ADC2Decim = {
                    Type = int32
                }
                ADC3Decim = {
                    Type = int32
                }
                ADC4Decim = {
                    Type = int32
                }
                ADC5Decim = {
                    Type = int32
                }
                ADC6Decim = {
                    Type = int32
                }
                ADC7Decim = {
                    Type = int32
                }
                ADC0Integral = {
                    Type = int64
                }
                ADC1Integral = {
                    Type = int64
                }
                ADC2Integral = {
                    Type = int64
                }
                ADC3Integral = {
                    Type = int64
                }
                ADC4Integral = {
                    Type = int64
                }
                ADC5Integral = {
                    Type = int64
                }
                ADC6Integral = {
                    Type = int64
                }
                ADC7Integral = {
                    Type = int64
                }
            }
        }
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 100000
            CPUMask = 1
            StackSize = 10000000
            Filename = "/tmp/AtcaIop.csv"
            //Filename = "/tmp/RTApp-AtcaIop.bin"
            Overwrite = "yes"
            //FileFormat = "binary" //Compulsory. Possible values are: binary and csv.
            FileFormat = "csv"
            CSVSeparator = "," //Compulsory if Format=csv. Sets the file separator type.
            StoreOnTrigger = 0
            Signals = {
                Time = {
                    Type = uint32
                }
                /*
                Counter = {
                    Type = uint32
                } */
                AdcRawDecim0 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim1 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim2 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim3 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim4 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim5 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim6 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcRawDecim7 = {
                    Type = float32
                    Format = ".1f"
                }
                AdcInteg0 = {
                    Type = float32
                    Format = ".4E"
                }
                AdcInteg1 = {
                    Type = float32
                    Format = ".4E"
                }
                AdcInteg2 = {
                    Type = float32
                    Format = ".4E"
                }
                AdcInteg3 = {
                    Type = float32
                    Format = ".4E"
                }
            }
        }
        +EPICSCAOutput = {
            Class = EPICSCA::EPICSCAOutput
            StackSize = 1048576
            CPUs = 0x1
            IgnoreBufferOverrun = 1
            NumberOfBuffers = 10
            Signals = {
                Time = {
                    PVName = "ISTTOK:marte2:TIME"
                    Type = uint32
                }
                Counter = {
                    PVName = "ISTTOK:marte2:COUNTER"
                    Type = uint32
                }
                ADC0S = {
                    PVName = "ISTTOK:marte2:ADC0S"
                    Type = float32
                }
                /*
                ADC1S = {
                    PVName = "ISTTOK:marte2:ADC1S"
                    Type = float32
                }
                ADC2S = {
                    PVName = "ISTTOK:marte2:ADC2S"
                    Type = float32
                }
                ADC3S = {
                    PVName = "ISTTOK:marte2:ADC3S"
                    Type = float32
                }
                */

            }
        }
        +EPICSCAOutputHist = {
            Class = EPICSCA::EPICSCAOutput
            StackSize = 1048576
            CPUs = 0x1
            IgnoreBufferOverrun = 1
            NumberOfBuffers = 10
            Signals = {
                Idle_Thread1_CycleTime_Stats = {
                    PVName = "ISTTOK:marte2:HIST-IDLE-CT"
                    Type = uint32
                }
                Run_Thread1_CycleTime_Stats = {
                    PVName = "ISTTOK:marte2:HIST-RUN-CT"
                    Type = uint32
                }
            }
        }

    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput GAMDS GAMTypeConvert GAMHistogramCycleTimes GAMCAOutput}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput GAMDS GAMTypeConvert GAMHistogramCycleTimes GAMCAOutput GAMSignalsWriter}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMInput }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}

//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
